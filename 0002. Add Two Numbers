/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        ListNode current1 = l1;
        ListNode current2 = l2;
        ListNode result = null;
        
        int intend = 0;
        string resultString = "";
        
        int sum = 0;
        
        while(current1 != null || current2 != null)
        {
            if(current1 != null && current2 != null)
            {
                sum = current1.val + current2.val + intend;

                current1 = current1.next;
                current2 = current2.next;
            }
            else
            {
                if(current1 != null)
                {
                    sum = current1.val + intend;

                    current1 = current1.next;
                }
                else //if(current2 != null)
                {
                    sum = current2.val + intend;

                    current2 = current2.next;
                }
            }
            
            if(sum >= 10)
            {
                intend = 1;
                sum = sum % 10;
                resultString += sum.ToString();
            }
            else
            {
                intend = 0;
                resultString += sum.ToString();
            }
        }
        
        if(intend == 1)
        {
            resultString += intend.ToString();
        }
        
        foreach(char resultChar in resultString)
        {
            ListNode charNode = new ListNode();
            charNode.val = Int32.Parse(resultChar.ToString());
            
            if(result == null)
            {
                result = charNode;
                current1 = result;
            }
            else
            {
                current1.next = charNode;
                current1 = current1.next;
            }
        }
        
        return result;
    }
}
